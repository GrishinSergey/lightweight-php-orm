<?php

namespace orm\Query;

use PDO;

/**
 * Class QueryExecutor. Execute query, generated by generator.
 */
class QueryExecutor
{
    /**
     * An object of PDO.
     *
     * @var PDO
     */
    private $pdo = null;
    /**
     * Prepared query. Store PDOStatement's object.
     *
     * @var \PDOStatement
     */
    private $query = null;
    /**
     * Data for prepared query.
     *
     * @var array
     */
    private $data = [];
    /**
     * Last inserted id.
     *
     * @var int
     */
    private $last_id = 0;
    /**
     * Count removed columns.
     *
     * @var int
     */
    private $count_columns = 0;
    /**
     * Result of select query.
     *
     * @var array
     */
    private $selected_result = null;

    /**
     * QueryExecutor constructor.
     *
     * @param $query \PDOStatement, prepared query for executing
     * @param $data array, store data for prepared query
     */
    public function __construct($query, $data)
    {
        $this->pdo = PdoAdapter::getInstance()->getPdoObject();
        $this->query = $query;
        $this->data = $data;
    }

    /**
     * Execute insert or update query.
     *
     * @return int|string, last added or changed id
     */
    public function insertOrUpdate()
    {
        $this->execute();
        $this->last_id = $this->pdo->lastInsertId();
        $this->pdo->commit();

        return $this->last_id;
    }

    /**
     * Execute delete query.
     *
     * @return int, count removed columns
     */
    public function delete()
    {
        $this->execute();
        $this->count_columns = $this->query->columnCount();
        $this->pdo->commit();

        return $this->count_columns;
    }

    /**
     * Execute select query.
     *
     * @return array, fetched data which was selected.
     */
    public function select()
    {
        $this->execute();
        $this->selected_result = $this->query->fetchAll(PDO::FETCH_ASSOC);
        $this->pdo->commit();

        return $this->selected_result;
    }

    /**
     * Base execute method. Start transaction (commit in called method,
     * select|insertOrUpdate|delete). Substitute data to prepared query
     * and execute it.
     */
    private function execute()
    {
        $this->pdo->beginTransaction();
        $this->query->execute($this->data);
    }

    /**
     * Execute pure sql query. Use this only for migrations.
     */
    public function executeSql()
    {
        $this->execute();
        $this->pdo->commit();
    }
}
